using System;
using System.Linq;
using FluentAssertions;
using MoreLinq.Extensions;
using NUnit.Framework;

namespace AdventOfCode._2020.Day20
{
    [TestFixture]
    public class Day20Tests
    {
        [Test]
        public void Part1()
        {
            var answer = Day20.Part1();
            answer.Should().NotBe(-1);
            answer.Should().Be(83775126454273);
        }

        [Test]
        public void Part1_Example()
        {
            Day20.Part1(Example).Should().Be(20899048083289);
        }
        
        [Test]
        public void TransformTests()
        {
            const string testInput = @"Tile 999:
#..
#..
##.";
            var tile = new Tile(testInput.Split(Environment.NewLine));

            tile.ToString().Should().Be(@"
#..
#..
##.".Trim());

            var right90 = tile.Rotate(Rotation.Right90);
            right90.ToString().Should().Be(@"
###
#..
...".Trim());
            
            var right180 = tile.Rotate(Rotation.Right180);
            right180.ToString().Should().Be(@"
.##
..#
..#".Trim());
            
            var left90 = tile.Rotate(Rotation.Left90);
            left90.ToString().Should().Be(@"
...
..#
###".Trim());

            var horizontalFlip = tile.Flip(Flip2D.Horizontal);
            horizontalFlip.ToString().Should().Be(@"
..#
..#
.##".Trim());
            
            var verticalFlip = tile.Flip(Flip2D.Vertical);
            verticalFlip.ToString().Should().Be(@"
##.
#..
#..".Trim());
        }

        [Test]
        public void MonsterLocationExample()
        {
            var input = @".####...#####..#...###..
#####..#..#.#.####..#.#.
.#.#...#.###...#.##.##..
#.#.##.###.#.##.##.#####
..##.###.####..#.####.##
...#.#..##.##...#..#..##
#.##.#..#.#..#..##.#.#..
.###.##.....#...###.#...
#.####.#.#....##.#..#.#.
##...#..#....#..#...####
..#.##...###..#.#####..#
....#.##.#.#####....#...
..##.##.###.....#.##..#.
#...#...###..####....##.
.#.##...#.##.#.#.###...#
#.###.#..####...##..#...
#.###...#.##...#.######.
.###.###.#######..#####.
..##.#..#..#.#######.###
#.#..##.########..#..##.
#.#####..#.#...##..#....
#....##..#.#########..##
#...#.....#..##...###.##
#..###....##.#...##.##.#";

            var megaTile = new MegaTile(input);

            megaTile.NumberOfMonsters().Should().Be(2);
            megaTile.CountOfNonMonsterTiles().Should().Be(273);
        }

        [Test]
        public void MegaTileIterationExample()
        {
            var input = @".#.#..#.##...#.##..#####
###....#.#....#..#......
##.##.###.#.#..######...
###.#####...#.#####.#..#
##.#....#.##.####...#.##
...########.#....#####.#
....#..#...##..#.#.###..
.####...#..#.....#......
#..#.##..#..###.#.##....
#.####..#.####.#.#.###..
###.#.#...#.######.#..##
#.####....##..########.#
##..##.#...#...#.#.#.#..
...#..#..#.#.##..###.###
.#.#....#.##.#...###.##.
###.#...#..#.##.######..
.#.#.###.##.##.#..#.##..
.####.###.#...###.#..#.#
..#.#..#..#.#.#.####.###
#..####...#.#.#.###.###.
#####..#####...###....##
#.##..#..#...#..####...#
.#.###..##..##..####.##.
...###...##...#...#..###";

            var megaTile = new MegaTile(input);

            var result = Day20.IterateMegaTilePart2(megaTile);
            result.Should().Be(273);
        }

        [Test]
        public void Part2()
        {
            var answer = Day20.Part2();
            answer.Should().NotBe(-2);
            answer.Should().Be(1993);
        }

        [Test]
        public void Part2_Example()
        {
            Day20.Part2(Example).Should().Be(273);
        }

        [Test]
        public void Part2_PuzzleLayoutTest()
        {
            var lines = Example.Split(Environment.NewLine).ToList();
            var blocks = SplitExtension.Split(lines, "");
            var tiles = blocks.Select(b => new Tile(b.ToList())).ToList();
            var megaTile = new MegaTile(tiles);

            megaTile.ToString().Should().Be(@"
.#.#..#.##...#.##..#####
###....#.#....#..#......
##.##.###.#.#..######...
###.#####...#.#####.#..#
##.#....#.##.####...#.##
...########.#....#####.#
....#..#...##..#.#.###..
.####...#..#.....#......
#..#.##..#..###.#.##....
#.####..#.####.#.#.###..
###.#.#...#.######.#..##
#.####....##..########.#
##..##.#...#...#.#.#.#..
...#..#..#.#.##..###.###
.#.#....#.##.#...###.##.
###.#...#..#.##.######..
.#.#.###.##.##.#..#.##..
.####.###.#...###.#..#.#
..#.#..#..#.#.#.####.###
#..####...#.#.#.###.###.
#####..#####...###....##
#.##..#..#...#..####...#
.#.###..##..##..####.##.
...###...##...#...#..###
".Trim());
        }
        
        private const string Example = @"Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...";
    }
}